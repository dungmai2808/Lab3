
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b48  08002b48  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002b48  08002b48  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b48  08002b48  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000068  08002bb8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002bb8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c75  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001851  00000000  00000000  00028d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001672d  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a799  00000000  00000000  00041f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082309  00000000  00000000  0004c706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cea0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  000cea64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b0c 	.word	0x08002b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002b0c 	.word	0x08002b0c

0800014c <isButton1Pressed>:

int TimeOutForKeyPress[3] =  {200, 200, 200}; // 200 is 2 second

int button_flag[3] = {0, 0, 0};

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_flag[0] == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button_flag[0] = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000084 	.word	0x20000084

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_flag[1] == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button_flag[1] = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000084 	.word	0x20000084

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_flag[2] == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	689b      	ldr	r3, [r3, #8]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button_flag[2] = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	609a      	str	r2, [r3, #8]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000084 	.word	0x20000084

080001b8 <getKeyInput>:

void getKeyInput() {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	//button1
	keyReg2[0] = keyReg1[0];
 80001be:	4b4b      	ldr	r3, [pc, #300]	; (80002ec <getKeyInput+0x134>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a4b      	ldr	r2, [pc, #300]	; (80002f0 <getKeyInput+0x138>)
 80001c4:	6013      	str	r3, [r2, #0]
	keyReg1[0] = keyReg0[0];
 80001c6:	4b4b      	ldr	r3, [pc, #300]	; (80002f4 <getKeyInput+0x13c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a48      	ldr	r2, [pc, #288]	; (80002ec <getKeyInput+0x134>)
 80001cc:	6013      	str	r3, [r2, #0]
	keyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d2:	4849      	ldr	r0, [pc, #292]	; (80002f8 <getKeyInput+0x140>)
 80001d4:	f001 fc62 	bl	8001a9c <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	461a      	mov	r2, r3
 80001dc:	4b45      	ldr	r3, [pc, #276]	; (80002f4 <getKeyInput+0x13c>)
 80001de:	601a      	str	r2, [r3, #0]
	//button2
	keyReg2[1] = keyReg1[1];
 80001e0:	4b42      	ldr	r3, [pc, #264]	; (80002ec <getKeyInput+0x134>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a42      	ldr	r2, [pc, #264]	; (80002f0 <getKeyInput+0x138>)
 80001e6:	6053      	str	r3, [r2, #4]
	keyReg1[1] = keyReg0[1];
 80001e8:	4b42      	ldr	r3, [pc, #264]	; (80002f4 <getKeyInput+0x13c>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a3f      	ldr	r2, [pc, #252]	; (80002ec <getKeyInput+0x134>)
 80001ee:	6053      	str	r3, [r2, #4]
	keyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f4:	4840      	ldr	r0, [pc, #256]	; (80002f8 <getKeyInput+0x140>)
 80001f6:	f001 fc51 	bl	8001a9c <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b3d      	ldr	r3, [pc, #244]	; (80002f4 <getKeyInput+0x13c>)
 8000200:	605a      	str	r2, [r3, #4]
	//button3
	keyReg2[2] = keyReg1[2];
 8000202:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <getKeyInput+0x134>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a3a      	ldr	r2, [pc, #232]	; (80002f0 <getKeyInput+0x138>)
 8000208:	6093      	str	r3, [r2, #8]
	keyReg1[2] = keyReg0[2];
 800020a:	4b3a      	ldr	r3, [pc, #232]	; (80002f4 <getKeyInput+0x13c>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	4a37      	ldr	r2, [pc, #220]	; (80002ec <getKeyInput+0x134>)
 8000210:	6093      	str	r3, [r2, #8]
	keyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000216:	4838      	ldr	r0, [pc, #224]	; (80002f8 <getKeyInput+0x140>)
 8000218:	f001 fc40 	bl	8001a9c <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b34      	ldr	r3, [pc, #208]	; (80002f4 <getKeyInput+0x13c>)
 8000222:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < 3; i++) {
 8000224:	2300      	movs	r3, #0
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	e058      	b.n	80002dc <getKeyInput+0x124>
		if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i])) {
 800022a:	4a32      	ldr	r2, [pc, #200]	; (80002f4 <getKeyInput+0x13c>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	492e      	ldr	r1, [pc, #184]	; (80002ec <getKeyInput+0x134>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d14b      	bne.n	80002d6 <getKeyInput+0x11e>
 800023e:	4a2b      	ldr	r2, [pc, #172]	; (80002ec <getKeyInput+0x134>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	492a      	ldr	r1, [pc, #168]	; (80002f0 <getKeyInput+0x138>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024e:	429a      	cmp	r2, r3
 8000250:	d141      	bne.n	80002d6 <getKeyInput+0x11e>
			if(keyReg3[i] != keyReg2[i]) {
 8000252:	4a2a      	ldr	r2, [pc, #168]	; (80002fc <getKeyInput+0x144>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025a:	4925      	ldr	r1, [pc, #148]	; (80002f0 <getKeyInput+0x138>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000262:	429a      	cmp	r2, r3
 8000264:	d018      	beq.n	8000298 <getKeyInput+0xe0>
				keyReg3[i] = keyReg2[i];
 8000266:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <getKeyInput+0x138>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026e:	4923      	ldr	r1, [pc, #140]	; (80002fc <getKeyInput+0x144>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(keyReg3[i] == PRESS_STATE) {
 8000276:	4a21      	ldr	r2, [pc, #132]	; (80002fc <getKeyInput+0x144>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d129      	bne.n	80002d6 <getKeyInput+0x11e>
					button_flag[i] = 1;
 8000282:	4a1f      	ldr	r2, [pc, #124]	; (8000300 <getKeyInput+0x148>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2101      	movs	r1, #1
 8000288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimeOutForKeyPress[i] = 200;
 800028c:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <getKeyInput+0x14c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	21c8      	movs	r1, #200	; 0xc8
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000296:	e01e      	b.n	80002d6 <getKeyInput+0x11e>
				}
			}
			else {
				TimeOutForKeyPress[i]--;
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <getKeyInput+0x14c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	4918      	ldr	r1, [pc, #96]	; (8000304 <getKeyInput+0x14c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimeOutForKeyPress[i] == 0) {
 80002aa:	4a16      	ldr	r2, [pc, #88]	; (8000304 <getKeyInput+0x14c>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d10f      	bne.n	80002d6 <getKeyInput+0x11e>
					TimeOutForKeyPress[i] = 200;
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInput+0x14c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	21c8      	movs	r1, #200	; 0xc8
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(keyReg3[i] == PRESS_STATE) {
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <getKeyInput+0x144>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d104      	bne.n	80002d6 <getKeyInput+0x11e>
						button_flag[i] = 1;
 80002cc:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <getKeyInput+0x148>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2101      	movs	r1, #1
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 3; i++) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b02      	cmp	r3, #2
 80002e0:	dda3      	ble.n	800022a <getKeyInput+0x72>
					}
				}
			}
		}
	}
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	2000000c 	.word	0x2000000c
 80002f0:	20000018 	.word	0x20000018
 80002f4:	20000000 	.word	0x20000000
 80002f8:	40011000 	.word	0x40011000
 80002fc:	20000024 	.word	0x20000024
 8000300:	20000084 	.word	0x20000084
 8000304:	20000030 	.word	0x20000030

08000308 <clearAllLed>:

int index_led = 0;
int led_buffer[4] = {1 , 2 , 3 , 4};   // index 0, 1 for 2 LED in road 1
									   // index 2, 3 for 2 LED in road 2

void clearAllLed() {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2101      	movs	r1, #1
 8000310:	480e      	ldr	r0, [pc, #56]	; (800034c <clearAllLed+0x44>)
 8000312:	f001 fbda 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	2102      	movs	r1, #2
 800031a:	480c      	ldr	r0, [pc, #48]	; (800034c <clearAllLed+0x44>)
 800031c:	f001 fbd5 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2104      	movs	r1, #4
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <clearAllLed+0x44>)
 8000326:	f001 fbd0 	bl	8001aca <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2108      	movs	r1, #8
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <clearAllLed+0x44>)
 8000330:	f001 fbcb 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2110      	movs	r1, #16
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <clearAllLed+0x44>)
 800033a:	f001 fbc6 	bl	8001aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 800033e:	2201      	movs	r2, #1
 8000340:	2120      	movs	r1, #32
 8000342:	4802      	ldr	r0, [pc, #8]	; (800034c <clearAllLed+0x44>)
 8000344:	f001 fbc1 	bl	8001aca <HAL_GPIO_WritePin>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40010800 	.word	0x40010800

08000350 <display7SEG1>:

void display7SEG1(int num) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b09      	cmp	r3, #9
 800035c:	d87f      	bhi.n	800045e <display7SEG1+0x10e>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <display7SEG1+0x14>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	0800038d 	.word	0x0800038d
 8000368:	080003a3 	.word	0x080003a3
 800036c:	080003b9 	.word	0x080003b9
 8000370:	080003cf 	.word	0x080003cf
 8000374:	080003e5 	.word	0x080003e5
 8000378:	080003fb 	.word	0x080003fb
 800037c:	08000411 	.word	0x08000411
 8000380:	08000427 	.word	0x08000427
 8000384:	0800043d 	.word	0x0800043d
 8000388:	08000449 	.word	0x08000449
	switch(num) {
		case 0:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d1_Pin
 800038c:	2200      	movs	r2, #0
 800038e:	213f      	movs	r1, #63	; 0x3f
 8000390:	4835      	ldr	r0, [pc, #212]	; (8000468 <display7SEG1+0x118>)
 8000392:	f001 fb9a 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e1_Pin|f1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, g1_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	4833      	ldr	r0, [pc, #204]	; (8000468 <display7SEG1+0x118>)
 800039c:	f001 fb95 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80003a0:	e05e      	b.n	8000460 <display7SEG1+0x110>
		case 1:
			HAL_GPIO_WritePin(GPIOB, b1_Pin|c1_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2106      	movs	r1, #6
 80003a6:	4830      	ldr	r0, [pc, #192]	; (8000468 <display7SEG1+0x118>)
 80003a8:	f001 fb8f 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, a1_Pin|d1_Pin
 80003ac:	2201      	movs	r2, #1
 80003ae:	2179      	movs	r1, #121	; 0x79
 80003b0:	482d      	ldr	r0, [pc, #180]	; (8000468 <display7SEG1+0x118>)
 80003b2:	f001 fb8a 	bl	8001aca <HAL_GPIO_WritePin>
		              	  	  	  	  |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_SET);
			break;
 80003b6:	e053      	b.n	8000460 <display7SEG1+0x110>
		case 2:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|d1_Pin
 80003b8:	2200      	movs	r2, #0
 80003ba:	215b      	movs	r1, #91	; 0x5b
 80003bc:	482a      	ldr	r0, [pc, #168]	; (8000468 <display7SEG1+0x118>)
 80003be:	f001 fb84 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e1_Pin|g1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, c1_Pin|f1_Pin, GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2124      	movs	r1, #36	; 0x24
 80003c6:	4828      	ldr	r0, [pc, #160]	; (8000468 <display7SEG1+0x118>)
 80003c8:	f001 fb7f 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80003cc:	e048      	b.n	8000460 <display7SEG1+0x110>
		case 3:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin
 80003ce:	2200      	movs	r2, #0
 80003d0:	214f      	movs	r1, #79	; 0x4f
 80003d2:	4825      	ldr	r0, [pc, #148]	; (8000468 <display7SEG1+0x118>)
 80003d4:	f001 fb79 	bl	8001aca <HAL_GPIO_WritePin>
			                          |d1_Pin|g1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, e1_Pin|f1_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2130      	movs	r1, #48	; 0x30
 80003dc:	4822      	ldr	r0, [pc, #136]	; (8000468 <display7SEG1+0x118>)
 80003de:	f001 fb74 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80003e2:	e03d      	b.n	8000460 <display7SEG1+0x110>
		case 4:
			HAL_GPIO_WritePin(GPIOB, b1_Pin|c1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2166      	movs	r1, #102	; 0x66
 80003e8:	481f      	ldr	r0, [pc, #124]	; (8000468 <display7SEG1+0x118>)
 80003ea:	f001 fb6e 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, a1_Pin|d1_Pin|e1_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2119      	movs	r1, #25
 80003f2:	481d      	ldr	r0, [pc, #116]	; (8000468 <display7SEG1+0x118>)
 80003f4:	f001 fb69 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80003f8:	e032      	b.n	8000460 <display7SEG1+0x110>
		case 5:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|c1_Pin|d1_Pin
 80003fa:	2200      	movs	r2, #0
 80003fc:	216d      	movs	r1, #109	; 0x6d
 80003fe:	481a      	ldr	r0, [pc, #104]	; (8000468 <display7SEG1+0x118>)
 8000400:	f001 fb63 	bl	8001aca <HAL_GPIO_WritePin>
			                          |f1_Pin|g1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, b1_Pin|e1_Pin, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2112      	movs	r1, #18
 8000408:	4817      	ldr	r0, [pc, #92]	; (8000468 <display7SEG1+0x118>)
 800040a:	f001 fb5e 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 800040e:	e027      	b.n	8000460 <display7SEG1+0x110>
		case 6:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|c1_Pin|d1_Pin
 8000410:	2200      	movs	r2, #0
 8000412:	217d      	movs	r1, #125	; 0x7d
 8000414:	4814      	ldr	r0, [pc, #80]	; (8000468 <display7SEG1+0x118>)
 8000416:	f001 fb58 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, b1_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2102      	movs	r1, #2
 800041e:	4812      	ldr	r0, [pc, #72]	; (8000468 <display7SEG1+0x118>)
 8000420:	f001 fb53 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 8000424:	e01c      	b.n	8000460 <display7SEG1+0x110>
		case 7:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2107      	movs	r1, #7
 800042a:	480f      	ldr	r0, [pc, #60]	; (8000468 <display7SEG1+0x118>)
 800042c:	f001 fb4d 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, d1_Pin|e1_Pin
 8000430:	2201      	movs	r2, #1
 8000432:	2178      	movs	r1, #120	; 0x78
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <display7SEG1+0x118>)
 8000436:	f001 fb48 	bl	8001aca <HAL_GPIO_WritePin>
									 |f1_Pin|g1_Pin, GPIO_PIN_SET);
			break;
 800043a:	e011      	b.n	8000460 <display7SEG1+0x110>
		case 8:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d1_Pin
 800043c:	2200      	movs	r2, #0
 800043e:	217f      	movs	r1, #127	; 0x7f
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <display7SEG1+0x118>)
 8000442:	f001 fb42 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);
			break;
 8000446:	e00b      	b.n	8000460 <display7SEG1+0x110>
		case 9:
			HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d1_Pin
 8000448:	2200      	movs	r2, #0
 800044a:	216f      	movs	r1, #111	; 0x6f
 800044c:	4806      	ldr	r0, [pc, #24]	; (8000468 <display7SEG1+0x118>)
 800044e:	f001 fb3c 	bl	8001aca <HAL_GPIO_WritePin>
			                          |f1_Pin|g1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, e1_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2110      	movs	r1, #16
 8000456:	4804      	ldr	r0, [pc, #16]	; (8000468 <display7SEG1+0x118>)
 8000458:	f001 fb37 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 800045c:	e000      	b.n	8000460 <display7SEG1+0x110>
		default:
			break;
 800045e:	bf00      	nop
	}
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010c00 	.word	0x40010c00

0800046c <display7SEG2>:

void display7SEG2(int num) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b09      	cmp	r3, #9
 8000478:	f200 8094 	bhi.w	80005a4 <display7SEG2+0x138>
 800047c:	a201      	add	r2, pc, #4	; (adr r2, 8000484 <display7SEG2+0x18>)
 800047e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000482:	bf00      	nop
 8000484:	080004ad 	.word	0x080004ad
 8000488:	080004c7 	.word	0x080004c7
 800048c:	080004e1 	.word	0x080004e1
 8000490:	080004fb 	.word	0x080004fb
 8000494:	08000515 	.word	0x08000515
 8000498:	0800052f 	.word	0x0800052f
 800049c:	08000549 	.word	0x08000549
 80004a0:	08000563 	.word	0x08000563
 80004a4:	0800057d 	.word	0x0800057d
 80004a8:	0800058b 	.word	0x0800058b
	switch(num) {
		case 0:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80004b2:	483f      	ldr	r0, [pc, #252]	; (80005b0 <display7SEG2+0x144>)
 80004b4:	f001 fb09 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e2_Pin|f2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, g2_Pin, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	483c      	ldr	r0, [pc, #240]	; (80005b0 <display7SEG2+0x144>)
 80004c0:	f001 fb03 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80004c4:	e06f      	b.n	80005a6 <display7SEG2+0x13a>
		case 1:
			HAL_GPIO_WritePin(GPIOB, b2_Pin|c2_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80004cc:	4838      	ldr	r0, [pc, #224]	; (80005b0 <display7SEG2+0x144>)
 80004ce:	f001 fafc 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, a2_Pin|d2_Pin
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 80004d8:	4835      	ldr	r0, [pc, #212]	; (80005b0 <display7SEG2+0x144>)
 80004da:	f001 faf6 	bl	8001aca <HAL_GPIO_WritePin>
		              	  	  	  	  |e2_Pin|f2_Pin|g2_Pin, GPIO_PIN_SET);
			break;
 80004de:	e062      	b.n	80005a6 <display7SEG2+0x13a>
		case 2:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|d2_Pin
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 80004e6:	4832      	ldr	r0, [pc, #200]	; (80005b0 <display7SEG2+0x144>)
 80004e8:	f001 faef 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e2_Pin|g2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, c2_Pin|f2_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <display7SEG2+0x144>)
 80004f4:	f001 fae9 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80004f8:	e055      	b.n	80005a6 <display7SEG2+0x13a>
		case 3:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000500:	482b      	ldr	r0, [pc, #172]	; (80005b0 <display7SEG2+0x144>)
 8000502:	f001 fae2 	bl	8001aca <HAL_GPIO_WritePin>
			                          |d2_Pin|g2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, e2_Pin|f2_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800050c:	4828      	ldr	r0, [pc, #160]	; (80005b0 <display7SEG2+0x144>)
 800050e:	f001 fadc 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 8000512:	e048      	b.n	80005a6 <display7SEG2+0x13a>
		case 4:
			HAL_GPIO_WritePin(GPIOB, b2_Pin|c2_Pin|f2_Pin|g2_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 800051a:	4825      	ldr	r0, [pc, #148]	; (80005b0 <display7SEG2+0x144>)
 800051c:	f001 fad5 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, a2_Pin|d2_Pin|e2_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000526:	4822      	ldr	r0, [pc, #136]	; (80005b0 <display7SEG2+0x144>)
 8000528:	f001 facf 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 800052c:	e03b      	b.n	80005a6 <display7SEG2+0x13a>
		case 5:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|c2_Pin|d2_Pin
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000534:	481e      	ldr	r0, [pc, #120]	; (80005b0 <display7SEG2+0x144>)
 8000536:	f001 fac8 	bl	8001aca <HAL_GPIO_WritePin>
			                          |f2_Pin|g2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, b2_Pin|e2_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000540:	481b      	ldr	r0, [pc, #108]	; (80005b0 <display7SEG2+0x144>)
 8000542:	f001 fac2 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 8000546:	e02e      	b.n	80005a6 <display7SEG2+0x13a>
		case 6:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|c2_Pin|d2_Pin
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800054e:	4818      	ldr	r0, [pc, #96]	; (80005b0 <display7SEG2+0x144>)
 8000550:	f001 fabb 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e2_Pin|f2_Pin|g2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, b2_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	4815      	ldr	r0, [pc, #84]	; (80005b0 <display7SEG2+0x144>)
 800055c:	f001 fab5 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 8000560:	e021      	b.n	80005a6 <display7SEG2+0x13a>
		case 7:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000568:	4811      	ldr	r0, [pc, #68]	; (80005b0 <display7SEG2+0x144>)
 800056a:	f001 faae 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, d2_Pin|e2_Pin
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000574:	480e      	ldr	r0, [pc, #56]	; (80005b0 <display7SEG2+0x144>)
 8000576:	f001 faa8 	bl	8001aca <HAL_GPIO_WritePin>
									 |f2_Pin|g2_Pin, GPIO_PIN_SET);
			break;
 800057a:	e014      	b.n	80005a6 <display7SEG2+0x13a>
		case 8:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <display7SEG2+0x144>)
 8000584:	f001 faa1 	bl	8001aca <HAL_GPIO_WritePin>
			                          |e2_Pin|f2_Pin|g2_Pin, GPIO_PIN_RESET);
			break;
 8000588:	e00d      	b.n	80005a6 <display7SEG2+0x13a>
		case 9:
			HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <display7SEG2+0x144>)
 8000592:	f001 fa9a 	bl	8001aca <HAL_GPIO_WritePin>
			                          |f2_Pin|g2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, e2_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <display7SEG2+0x144>)
 800059e:	f001 fa94 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80005a2:	e000      	b.n	80005a6 <display7SEG2+0x13a>
		default:
			break;
 80005a4:	bf00      	nop
	}
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <update7SEG>:

void update7SEG (int index) { // index 0, 1 for 2 LED in road 1
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d85a      	bhi.n	8000678 <update7SEG+0xc4>
 80005c2:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <update7SEG+0x14>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	08000601 	.word	0x08000601
 80005d0:	08000629 	.word	0x08000629
 80005d4:	08000651 	.word	0x08000651
	   	   	   	   	   	   	  // index 2, 3 for 2 LED in road 2
	switch(index) {
		case 0:
			display7SEG1(led_buffer[index]);
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <update7SEG+0xd0>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff feb5 	bl	8000350 <display7SEG1>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ec:	4826      	ldr	r0, [pc, #152]	; (8000688 <update7SEG+0xd4>)
 80005ee:	f001 fa6c 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <update7SEG+0xd4>)
 80005fa:	f001 fa66 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 80005fe:	e03c      	b.n	800067a <update7SEG+0xc6>
		case 1:
			display7SEG1(led_buffer[index]);
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <update7SEG+0xd0>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fea1 	bl	8000350 <display7SEG1>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <update7SEG+0xd4>)
 8000616:	f001 fa58 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <update7SEG+0xd4>)
 8000622:	f001 fa52 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 8000626:	e028      	b.n	800067a <update7SEG+0xc6>
		case 2:
			display7SEG2(led_buffer[index]);
 8000628:	4a16      	ldr	r2, [pc, #88]	; (8000684 <update7SEG+0xd0>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff1b 	bl	800046c <display7SEG2>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <update7SEG+0xd4>)
 800063e:	f001 fa44 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <update7SEG+0xd4>)
 800064a:	f001 fa3e 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 800064e:	e014      	b.n	800067a <update7SEG+0xc6>
		case 3:
			display7SEG2(led_buffer[index]);
 8000650:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <update7SEG+0xd0>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff07 	bl	800046c <display7SEG2>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <update7SEG+0xd4>)
 8000666:	f001 fa30 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <update7SEG+0xd4>)
 8000672:	f001 fa2a 	bl	8001aca <HAL_GPIO_WritePin>
			break;
 8000676:	e000      	b.n	800067a <update7SEG+0xc6>
		default:
			break;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000048 	.word	0x20000048
 8000688:	40010800 	.word	0x40010800

0800068c <updateClockBuffer>:

void updateClockBuffer() {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	led_buffer[0] = counter1 / 10;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <updateClockBuffer+0x70>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <updateClockBuffer+0x74>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1092      	asrs	r2, r2, #2
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	4a18      	ldr	r2, [pc, #96]	; (8000704 <updateClockBuffer+0x78>)
 80006a2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = counter1 % 10;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <updateClockBuffer+0x70>)
 80006a6:	6819      	ldr	r1, [r3, #0]
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <updateClockBuffer+0x74>)
 80006aa:	fb83 2301 	smull	r2, r3, r3, r1
 80006ae:	109a      	asrs	r2, r3, #2
 80006b0:	17cb      	asrs	r3, r1, #31
 80006b2:	1ad2      	subs	r2, r2, r3
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1aca      	subs	r2, r1, r3
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <updateClockBuffer+0x78>)
 80006c0:	605a      	str	r2, [r3, #4]
	led_buffer[2] = counter2 / 10;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <updateClockBuffer+0x7c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <updateClockBuffer+0x74>)
 80006c8:	fb82 1203 	smull	r1, r2, r2, r3
 80006cc:	1092      	asrs	r2, r2, #2
 80006ce:	17db      	asrs	r3, r3, #31
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <updateClockBuffer+0x78>)
 80006d4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = counter2 % 10;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <updateClockBuffer+0x7c>)
 80006d8:	6819      	ldr	r1, [r3, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <updateClockBuffer+0x74>)
 80006dc:	fb83 2301 	smull	r2, r3, r3, r1
 80006e0:	109a      	asrs	r2, r3, #2
 80006e2:	17cb      	asrs	r3, r1, #31
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	1aca      	subs	r2, r1, r3
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <updateClockBuffer+0x78>)
 80006f2:	60da      	str	r2, [r3, #12]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000090 	.word	0x20000090
 8000700:	66666667 	.word	0x66666667
 8000704:	20000048 	.word	0x20000048
 8000708:	20000094 	.word	0x20000094

0800070c <fsm_automatic_run>:


void fsm_automatic_run() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	switch(status) {
 8000710:	4b79      	ldr	r3, [pc, #484]	; (80008f8 <fsm_automatic_run+0x1ec>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b07      	cmp	r3, #7
 8000716:	f200 8477 	bhi.w	8001008 <fsm_automatic_run+0x8fc>
 800071a:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <fsm_automatic_run+0x14>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	08000741 	.word	0x08000741
 8000724:	080007d5 	.word	0x080007d5
 8000728:	08000925 	.word	0x08000925
 800072c:	08000a49 	.word	0x08000a49
 8000730:	08000b99 	.word	0x08000b99
 8000734:	08000cbd 	.word	0x08000cbd
 8000738:	08000dd5 	.word	0x08000dd5
 800073c:	08000ec5 	.word	0x08000ec5
		case INIT:
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2101      	movs	r1, #1
 8000744:	486d      	ldr	r0, [pc, #436]	; (80008fc <fsm_automatic_run+0x1f0>)
 8000746:	f001 f9c0 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2102      	movs	r1, #2
 800074e:	486b      	ldr	r0, [pc, #428]	; (80008fc <fsm_automatic_run+0x1f0>)
 8000750:	f001 f9bb 	bl	8001aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2104      	movs	r1, #4
 8000758:	4868      	ldr	r0, [pc, #416]	; (80008fc <fsm_automatic_run+0x1f0>)
 800075a:	f001 f9b6 	bl	8001aca <HAL_GPIO_WritePin>

	  	    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2108      	movs	r1, #8
 8000762:	4866      	ldr	r0, [pc, #408]	; (80008fc <fsm_automatic_run+0x1f0>)
 8000764:	f001 f9b1 	bl	8001aca <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	4863      	ldr	r0, [pc, #396]	; (80008fc <fsm_automatic_run+0x1f0>)
 800076e:	f001 f9ac 	bl	8001aca <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	4861      	ldr	r0, [pc, #388]	; (80008fc <fsm_automatic_run+0x1f0>)
 8000778:	f001 f9a7 	bl	8001aca <HAL_GPIO_WritePin>

			status = RED_GREEN;
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <fsm_automatic_run+0x1ec>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]

			counter1 = redDuration - 1;
 8000782:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <fsm_automatic_run+0x1f4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a5e      	ldr	r2, [pc, #376]	; (8000904 <fsm_automatic_run+0x1f8>)
 800078a:	6013      	str	r3, [r2, #0]
			counter2 = greenDuration - 1;
 800078c:	4b5e      	ldr	r3, [pc, #376]	; (8000908 <fsm_automatic_run+0x1fc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b01      	subs	r3, #1
 8000792:	4a5e      	ldr	r2, [pc, #376]	; (800090c <fsm_automatic_run+0x200>)
 8000794:	6013      	str	r3, [r2, #0]

			index_led = 0;
 8000796:	4b5e      	ldr	r3, [pc, #376]	; (8000910 <fsm_automatic_run+0x204>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
			updateClockBuffer();
 800079c:	f7ff ff76 	bl	800068c <updateClockBuffer>
			update7SEG(index_led);
 80007a0:	4b5b      	ldr	r3, [pc, #364]	; (8000910 <fsm_automatic_run+0x204>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff05 	bl	80005b4 <update7SEG>
			update7SEG(index_led+2);
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <fsm_automatic_run+0x204>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3302      	adds	r3, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff feff 	bl	80005b4 <update7SEG>

			setTimer1(greenDuration * 1000); // Timer 1 for Traffic Led
 80007b6:	4b54      	ldr	r3, [pc, #336]	; (8000908 <fsm_automatic_run+0x1fc>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fd6a 	bl	800129c <setTimer1>
			setTimer2(500);  // Timer 2 for LED scanning
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f000 fd80 	bl	80012d0 <setTimer2>
 			break;
 80007d0:	f000 bc29 	b.w	8001026 <fsm_automatic_run+0x91a>
		case RED_GREEN:
	  	    if(timer1_flag == 1) {
 80007d4:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <fsm_automatic_run+0x208>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d131      	bne.n	8000840 <fsm_automatic_run+0x134>
	  	    	//RED_GREEN -> RED_AMBER
	  	  	    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	4846      	ldr	r0, [pc, #280]	; (80008fc <fsm_automatic_run+0x1f0>)
 80007e2:	f001 f972 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2102      	movs	r1, #2
 80007ea:	4844      	ldr	r0, [pc, #272]	; (80008fc <fsm_automatic_run+0x1f0>)
 80007ec:	f001 f96d 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2104      	movs	r1, #4
 80007f4:	4841      	ldr	r0, [pc, #260]	; (80008fc <fsm_automatic_run+0x1f0>)
 80007f6:	f001 f968 	bl	8001aca <HAL_GPIO_WritePin>

	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2108      	movs	r1, #8
 80007fe:	483f      	ldr	r0, [pc, #252]	; (80008fc <fsm_automatic_run+0x1f0>)
 8000800:	f001 f963 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	483c      	ldr	r0, [pc, #240]	; (80008fc <fsm_automatic_run+0x1f0>)
 800080a:	f001 f95e 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2120      	movs	r1, #32
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <fsm_automatic_run+0x1f0>)
 8000814:	f001 f959 	bl	8001aca <HAL_GPIO_WritePin>

	  	  	    status = RED_AMBER;
 8000818:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <fsm_automatic_run+0x1ec>)
 800081a:	2202      	movs	r2, #2
 800081c:	601a      	str	r2, [r3, #0]

	  	  	    counter1 = amberDuration;
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <fsm_automatic_run+0x20c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a38      	ldr	r2, [pc, #224]	; (8000904 <fsm_automatic_run+0x1f8>)
 8000824:	6013      	str	r3, [r2, #0]
	  	  	    counter2 = amberDuration;
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <fsm_automatic_run+0x20c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a38      	ldr	r2, [pc, #224]	; (800090c <fsm_automatic_run+0x200>)
 800082c:	6013      	str	r3, [r2, #0]

	  	    	setTimer1(amberDuration * 1000);
 800082e:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <fsm_automatic_run+0x20c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000836:	fb02 f303 	mul.w	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fd2e 	bl	800129c <setTimer1>
	  	    }
	  	    if(timer2_flag == 1) {
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <fsm_automatic_run+0x210>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d124      	bne.n	8000892 <fsm_automatic_run+0x186>
	  	    	index_led = 1 - index_led;
 8000848:	4b31      	ldr	r3, [pc, #196]	; (8000910 <fsm_automatic_run+0x204>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f1c3 0301 	rsb	r3, r3, #1
 8000850:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <fsm_automatic_run+0x204>)
 8000852:	6013      	str	r3, [r2, #0]
	  	    	if(index_led == 0) {
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <fsm_automatic_run+0x204>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10b      	bne.n	8000874 <fsm_automatic_run+0x168>
	  	    		counter1--;
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <fsm_automatic_run+0x1f8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a28      	ldr	r2, [pc, #160]	; (8000904 <fsm_automatic_run+0x1f8>)
 8000864:	6013      	str	r3, [r2, #0]
	  	    		counter2--;
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <fsm_automatic_run+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3b01      	subs	r3, #1
 800086c:	4a27      	ldr	r2, [pc, #156]	; (800090c <fsm_automatic_run+0x200>)
 800086e:	6013      	str	r3, [r2, #0]
	  	    		updateClockBuffer();
 8000870:	f7ff ff0c 	bl	800068c <updateClockBuffer>
	  	    	}
	  	    	update7SEG(index_led);
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <fsm_automatic_run+0x204>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe9b 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <fsm_automatic_run+0x204>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3302      	adds	r3, #2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe95 	bl	80005b4 <update7SEG>

	  	    	setTimer2(500);
 800088a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088e:	f000 fd1f 	bl	80012d0 <setTimer2>
	  	    }
	  	    if(isButton1Pressed() == 1) {
 8000892:	f7ff fc5b 	bl	800014c <isButton1Pressed>
 8000896:	4603      	mov	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	f040 83b7 	bne.w	800100c <fsm_automatic_run+0x900>
	  	    	status = RED_MODIFY;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <fsm_automatic_run+0x1ec>)
 80008a0:	2205      	movs	r2, #5
 80008a2:	601a      	str	r2, [r3, #0]

	  	    	counter1 = 0;  // for duration setup, increase when button ís press and assign it to duration
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <fsm_automatic_run+0x1f8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
	  	    	counter2 = 2;  // for Mode status (RED_MODIFY is Mode 2)
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <fsm_automatic_run+0x200>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	601a      	str	r2, [r3, #0]
	  	    	index_led = 0;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <fsm_automatic_run+0x204>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
	  	    	updateClockBuffer();
 80008b6:	f7ff fee9 	bl	800068c <updateClockBuffer>
	  	    	update7SEG(index_led);
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <fsm_automatic_run+0x204>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe78 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <fsm_automatic_run+0x204>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3302      	adds	r3, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe72 	bl	80005b4 <update7SEG>

	  	    	setupDuration = 0; // if setupDuration is not set, the switch status can't
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <fsm_automatic_run+0x214>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
	  	    	clearAllLed();
 80008d6:	f7ff fd17 	bl	8000308 <clearAllLed>
	  	    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2101      	movs	r1, #1
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <fsm_automatic_run+0x1f0>)
 80008e0:	f001 f8f3 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2108      	movs	r1, #8
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <fsm_automatic_run+0x1f0>)
 80008ea:	f001 f8ee 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	setTimer1(500);
 80008ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f2:	f000 fcd3 	bl	800129c <setTimer1>
	  	    }
			break;
 80008f6:	e389      	b.n	800100c <fsm_automatic_run+0x900>
 80008f8:	200000b0 	.word	0x200000b0
 80008fc:	40010800 	.word	0x40010800
 8000900:	2000003c 	.word	0x2000003c
 8000904:	20000090 	.word	0x20000090
 8000908:	20000044 	.word	0x20000044
 800090c:	20000094 	.word	0x20000094
 8000910:	2000009c 	.word	0x2000009c
 8000914:	200000a4 	.word	0x200000a4
 8000918:	20000040 	.word	0x20000040
 800091c:	200000ac 	.word	0x200000ac
 8000920:	20000098 	.word	0x20000098
		case RED_AMBER:
	  	    if(timer1_flag == 1) {
 8000924:	4b91      	ldr	r3, [pc, #580]	; (8000b6c <fsm_automatic_run+0x460>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d131      	bne.n	8000990 <fsm_automatic_run+0x284>
	  	    	// RED_AMBER -> GREEN_RED
	  	  	    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	488f      	ldr	r0, [pc, #572]	; (8000b70 <fsm_automatic_run+0x464>)
 8000932:	f001 f8ca 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2102      	movs	r1, #2
 800093a:	488d      	ldr	r0, [pc, #564]	; (8000b70 <fsm_automatic_run+0x464>)
 800093c:	f001 f8c5 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2104      	movs	r1, #4
 8000944:	488a      	ldr	r0, [pc, #552]	; (8000b70 <fsm_automatic_run+0x464>)
 8000946:	f001 f8c0 	bl	8001aca <HAL_GPIO_WritePin>

	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	4888      	ldr	r0, [pc, #544]	; (8000b70 <fsm_automatic_run+0x464>)
 8000950:	f001 f8bb 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4885      	ldr	r0, [pc, #532]	; (8000b70 <fsm_automatic_run+0x464>)
 800095a:	f001 f8b6 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2120      	movs	r1, #32
 8000962:	4883      	ldr	r0, [pc, #524]	; (8000b70 <fsm_automatic_run+0x464>)
 8000964:	f001 f8b1 	bl	8001aca <HAL_GPIO_WritePin>

	  	  	    status = GREEN_RED;
 8000968:	4b82      	ldr	r3, [pc, #520]	; (8000b74 <fsm_automatic_run+0x468>)
 800096a:	2203      	movs	r2, #3
 800096c:	601a      	str	r2, [r3, #0]

	  	  	    counter1 = greenDuration;
 800096e:	4b82      	ldr	r3, [pc, #520]	; (8000b78 <fsm_automatic_run+0x46c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a82      	ldr	r2, [pc, #520]	; (8000b7c <fsm_automatic_run+0x470>)
 8000974:	6013      	str	r3, [r2, #0]
	  	  	    counter2 = redDuration;
 8000976:	4b82      	ldr	r3, [pc, #520]	; (8000b80 <fsm_automatic_run+0x474>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a82      	ldr	r2, [pc, #520]	; (8000b84 <fsm_automatic_run+0x478>)
 800097c:	6013      	str	r3, [r2, #0]

	  	    	setTimer1(greenDuration * 1000);
 800097e:	4b7e      	ldr	r3, [pc, #504]	; (8000b78 <fsm_automatic_run+0x46c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000986:	fb02 f303 	mul.w	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fc86 	bl	800129c <setTimer1>
	  	    }
	  	    if(timer2_flag == 1) {
 8000990:	4b7d      	ldr	r3, [pc, #500]	; (8000b88 <fsm_automatic_run+0x47c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d124      	bne.n	80009e2 <fsm_automatic_run+0x2d6>
	  	    	index_led = 1 - index_led;
 8000998:	4b7c      	ldr	r3, [pc, #496]	; (8000b8c <fsm_automatic_run+0x480>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1c3 0301 	rsb	r3, r3, #1
 80009a0:	4a7a      	ldr	r2, [pc, #488]	; (8000b8c <fsm_automatic_run+0x480>)
 80009a2:	6013      	str	r3, [r2, #0]
	  	    	if(index_led == 0) {   // khoang cach giua 2 lan index = 0 la 1s
 80009a4:	4b79      	ldr	r3, [pc, #484]	; (8000b8c <fsm_automatic_run+0x480>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10b      	bne.n	80009c4 <fsm_automatic_run+0x2b8>
	  	    		counter1--;
 80009ac:	4b73      	ldr	r3, [pc, #460]	; (8000b7c <fsm_automatic_run+0x470>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	4a72      	ldr	r2, [pc, #456]	; (8000b7c <fsm_automatic_run+0x470>)
 80009b4:	6013      	str	r3, [r2, #0]
	  	    		counter2--;
 80009b6:	4b73      	ldr	r3, [pc, #460]	; (8000b84 <fsm_automatic_run+0x478>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	4a71      	ldr	r2, [pc, #452]	; (8000b84 <fsm_automatic_run+0x478>)
 80009be:	6013      	str	r3, [r2, #0]
	  	    		updateClockBuffer();
 80009c0:	f7ff fe64 	bl	800068c <updateClockBuffer>
	  	    	}
	  	    	update7SEG(index_led);
 80009c4:	4b71      	ldr	r3, [pc, #452]	; (8000b8c <fsm_automatic_run+0x480>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fdf3 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 80009ce:	4b6f      	ldr	r3, [pc, #444]	; (8000b8c <fsm_automatic_run+0x480>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3302      	adds	r3, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fded 	bl	80005b4 <update7SEG>

	  	    	setTimer2(500);
 80009da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009de:	f000 fc77 	bl	80012d0 <setTimer2>
	  	    }
	  	    if(isButton1Pressed() == 1) {
 80009e2:	f7ff fbb3 	bl	800014c <isButton1Pressed>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	f040 8311 	bne.w	8001010 <fsm_automatic_run+0x904>
	  	    	status = RED_MODIFY;
 80009ee:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <fsm_automatic_run+0x468>)
 80009f0:	2205      	movs	r2, #5
 80009f2:	601a      	str	r2, [r3, #0]

	  	    	counter1 = 0;  // for duration setup, increase when button ís press and assign it to duration
 80009f4:	4b61      	ldr	r3, [pc, #388]	; (8000b7c <fsm_automatic_run+0x470>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
	  	    	counter2 = 2;  // for Mode status (RED_MODIFY is Mode 2)
 80009fa:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <fsm_automatic_run+0x478>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	601a      	str	r2, [r3, #0]
	  	    	index_led = 0;
 8000a00:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <fsm_automatic_run+0x480>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
	  	    	updateClockBuffer();
 8000a06:	f7ff fe41 	bl	800068c <updateClockBuffer>
	  	    	update7SEG(index_led);
 8000a0a:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <fsm_automatic_run+0x480>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fdd0 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 8000a14:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <fsm_automatic_run+0x480>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fdca 	bl	80005b4 <update7SEG>

	  	    	setupDuration = 0; // if setupDuration is not set, the switch status can't
 8000a20:	4b5b      	ldr	r3, [pc, #364]	; (8000b90 <fsm_automatic_run+0x484>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
	  	    	clearAllLed();
 8000a26:	f7ff fc6f 	bl	8000308 <clearAllLed>
	  	    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4850      	ldr	r0, [pc, #320]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a30:	f001 f84b 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2108      	movs	r1, #8
 8000a38:	484d      	ldr	r0, [pc, #308]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a3a:	f001 f846 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	setTimer1(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a42:	f000 fc2b 	bl	800129c <setTimer1>
	  	    }
			break;
 8000a46:	e2e3      	b.n	8001010 <fsm_automatic_run+0x904>
		case GREEN_RED:
	  	    if(timer1_flag == 1) {
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <fsm_automatic_run+0x460>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d131      	bne.n	8000ab4 <fsm_automatic_run+0x3a8>
	  	    	// GREEN_RED -> AMBER_RED
	  	  	    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	4846      	ldr	r0, [pc, #280]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a56:	f001 f838 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4844      	ldr	r0, [pc, #272]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a60:	f001 f833 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2104      	movs	r1, #4
 8000a68:	4841      	ldr	r0, [pc, #260]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a6a:	f001 f82e 	bl	8001aca <HAL_GPIO_WritePin>

	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2108      	movs	r1, #8
 8000a72:	483f      	ldr	r0, [pc, #252]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a74:	f001 f829 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	483c      	ldr	r0, [pc, #240]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a7e:	f001 f824 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2120      	movs	r1, #32
 8000a86:	483a      	ldr	r0, [pc, #232]	; (8000b70 <fsm_automatic_run+0x464>)
 8000a88:	f001 f81f 	bl	8001aca <HAL_GPIO_WritePin>

	  	  	    status = AMBER_RED;
 8000a8c:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <fsm_automatic_run+0x468>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	601a      	str	r2, [r3, #0]

	  	  	    counter1 = amberDuration;
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <fsm_automatic_run+0x488>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a39      	ldr	r2, [pc, #228]	; (8000b7c <fsm_automatic_run+0x470>)
 8000a98:	6013      	str	r3, [r2, #0]
	  	  	    counter2 = amberDuration;
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <fsm_automatic_run+0x488>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a39      	ldr	r2, [pc, #228]	; (8000b84 <fsm_automatic_run+0x478>)
 8000aa0:	6013      	str	r3, [r2, #0]

	  	    	setTimer1(amberDuration * 1000);
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <fsm_automatic_run+0x488>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fbf4 	bl	800129c <setTimer1>
	  	    }
	  	    if(timer2_flag == 1) {
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <fsm_automatic_run+0x47c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d124      	bne.n	8000b06 <fsm_automatic_run+0x3fa>
	  	    	index_led = 1 - index_led;
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <fsm_automatic_run+0x480>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f1c3 0301 	rsb	r3, r3, #1
 8000ac4:	4a31      	ldr	r2, [pc, #196]	; (8000b8c <fsm_automatic_run+0x480>)
 8000ac6:	6013      	str	r3, [r2, #0]
	  	    	if(index_led == 0) {  // khoang cach giua 2 lan index = 0 la 1s
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <fsm_automatic_run+0x480>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10b      	bne.n	8000ae8 <fsm_automatic_run+0x3dc>
	  	    		counter1--;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <fsm_automatic_run+0x470>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <fsm_automatic_run+0x470>)
 8000ad8:	6013      	str	r3, [r2, #0]
	  	    		counter2--;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <fsm_automatic_run+0x478>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <fsm_automatic_run+0x478>)
 8000ae2:	6013      	str	r3, [r2, #0]
	  	    		updateClockBuffer();
 8000ae4:	f7ff fdd2 	bl	800068c <updateClockBuffer>
	  	    	}
	  	    	update7SEG(index_led);
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <fsm_automatic_run+0x480>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd61 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <fsm_automatic_run+0x480>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3302      	adds	r3, #2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd5b 	bl	80005b4 <update7SEG>

	  	    	setTimer2(500);
 8000afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b02:	f000 fbe5 	bl	80012d0 <setTimer2>
	  	    }
	  	    if(isButton1Pressed() == 1) {
 8000b06:	f7ff fb21 	bl	800014c <isButton1Pressed>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	f040 8281 	bne.w	8001014 <fsm_automatic_run+0x908>
	  	    	status = RED_MODIFY;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <fsm_automatic_run+0x468>)
 8000b14:	2205      	movs	r2, #5
 8000b16:	601a      	str	r2, [r3, #0]

	  	    	counter1 = 0;  // for duration setup, increase when button ís press and assign it to duration
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <fsm_automatic_run+0x470>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
	  	    	counter2 = 2;  // for Mode status (RED_MODIFY is Mode 2)
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <fsm_automatic_run+0x478>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	601a      	str	r2, [r3, #0]
	  	    	index_led = 0;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <fsm_automatic_run+0x480>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
	  	    	updateClockBuffer();
 8000b2a:	f7ff fdaf 	bl	800068c <updateClockBuffer>
	  	    	update7SEG(index_led);
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <fsm_automatic_run+0x480>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd3e 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <fsm_automatic_run+0x480>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd38 	bl	80005b4 <update7SEG>

	  	    	setupDuration = 0; // if setupDuration is not set, the switch status can't
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <fsm_automatic_run+0x484>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
	  	    	clearAllLed();
 8000b4a:	f7ff fbdd 	bl	8000308 <clearAllLed>
	  	    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2101      	movs	r1, #1
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <fsm_automatic_run+0x464>)
 8000b54:	f000 ffb9 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <fsm_automatic_run+0x464>)
 8000b5e:	f000 ffb4 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	setTimer1(500);
 8000b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b66:	f000 fb99 	bl	800129c <setTimer1>
	  	    }
			break;
 8000b6a:	e253      	b.n	8001014 <fsm_automatic_run+0x908>
 8000b6c:	200000a4 	.word	0x200000a4
 8000b70:	40010800 	.word	0x40010800
 8000b74:	200000b0 	.word	0x200000b0
 8000b78:	20000044 	.word	0x20000044
 8000b7c:	20000090 	.word	0x20000090
 8000b80:	2000003c 	.word	0x2000003c
 8000b84:	20000094 	.word	0x20000094
 8000b88:	200000ac 	.word	0x200000ac
 8000b8c:	2000009c 	.word	0x2000009c
 8000b90:	20000098 	.word	0x20000098
 8000b94:	20000040 	.word	0x20000040
		case AMBER_RED:
	  	    if(timer1_flag == 1) {
 8000b98:	4b84      	ldr	r3, [pc, #528]	; (8000dac <fsm_automatic_run+0x6a0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d131      	bne.n	8000c04 <fsm_automatic_run+0x4f8>
	  	    	// AMBER_RED -> RED_GREEN
	  	  	    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4882      	ldr	r0, [pc, #520]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000ba6:	f000 ff90 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2102      	movs	r1, #2
 8000bae:	4880      	ldr	r0, [pc, #512]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000bb0:	f000 ff8b 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	487d      	ldr	r0, [pc, #500]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000bba:	f000 ff86 	bl	8001aca <HAL_GPIO_WritePin>

	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	487b      	ldr	r0, [pc, #492]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000bc4:	f000 ff81 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4878      	ldr	r0, [pc, #480]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000bce:	f000 ff7c 	bl	8001aca <HAL_GPIO_WritePin>
	  	  	    HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4876      	ldr	r0, [pc, #472]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000bd8:	f000 ff77 	bl	8001aca <HAL_GPIO_WritePin>

	  	  	    status = RED_GREEN;
 8000bdc:	4b75      	ldr	r3, [pc, #468]	; (8000db4 <fsm_automatic_run+0x6a8>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	601a      	str	r2, [r3, #0]

	  	  	    counter1 = redDuration;
 8000be2:	4b75      	ldr	r3, [pc, #468]	; (8000db8 <fsm_automatic_run+0x6ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a75      	ldr	r2, [pc, #468]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000be8:	6013      	str	r3, [r2, #0]
	  	  	    counter2 = greenDuration;
 8000bea:	4b75      	ldr	r3, [pc, #468]	; (8000dc0 <fsm_automatic_run+0x6b4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a75      	ldr	r2, [pc, #468]	; (8000dc4 <fsm_automatic_run+0x6b8>)
 8000bf0:	6013      	str	r3, [r2, #0]

	  	    	setTimer1(greenDuration * 1000);
 8000bf2:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <fsm_automatic_run+0x6b4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fb4c 	bl	800129c <setTimer1>
	  	    }
	  	    if(timer2_flag == 1) {
 8000c04:	4b70      	ldr	r3, [pc, #448]	; (8000dc8 <fsm_automatic_run+0x6bc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d124      	bne.n	8000c56 <fsm_automatic_run+0x54a>
	  	    	index_led = 1 - index_led;
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1c3 0301 	rsb	r3, r3, #1
 8000c14:	4a6d      	ldr	r2, [pc, #436]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c16:	6013      	str	r3, [r2, #0]
	  	    	if(index_led == 0) { // khoang cach giua 2 lan index = 0 la 1s
 8000c18:	4b6c      	ldr	r3, [pc, #432]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10b      	bne.n	8000c38 <fsm_automatic_run+0x52c>
	  	    		counter1--;
 8000c20:	4b66      	ldr	r3, [pc, #408]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	4a65      	ldr	r2, [pc, #404]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000c28:	6013      	str	r3, [r2, #0]
	  	    		counter2--;
 8000c2a:	4b66      	ldr	r3, [pc, #408]	; (8000dc4 <fsm_automatic_run+0x6b8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	4a64      	ldr	r2, [pc, #400]	; (8000dc4 <fsm_automatic_run+0x6b8>)
 8000c32:	6013      	str	r3, [r2, #0]
	  	    		updateClockBuffer();
 8000c34:	f7ff fd2a 	bl	800068c <updateClockBuffer>
	  	    	}
	  	    	update7SEG(index_led);
 8000c38:	4b64      	ldr	r3, [pc, #400]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fcb9 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 8000c42:	4b62      	ldr	r3, [pc, #392]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3302      	adds	r3, #2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fcb3 	bl	80005b4 <update7SEG>

	  	    	setTimer2(500);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c52:	f000 fb3d 	bl	80012d0 <setTimer2>
	  	    }
	  	    if(isButton1Pressed() == 1) {
 8000c56:	f7ff fa79 	bl	800014c <isButton1Pressed>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	f040 81db 	bne.w	8001018 <fsm_automatic_run+0x90c>
	  	    	status = RED_MODIFY;
 8000c62:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <fsm_automatic_run+0x6a8>)
 8000c64:	2205      	movs	r2, #5
 8000c66:	601a      	str	r2, [r3, #0]

	  	    	counter1 = 0;  // for duration setup, increase when button ís press and assign it to duration
 8000c68:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
	  	    	counter2 = 2;  // for Mode status (RED_MODIFY is Mode 2)
 8000c6e:	4b55      	ldr	r3, [pc, #340]	; (8000dc4 <fsm_automatic_run+0x6b8>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	601a      	str	r2, [r3, #0]
	  	    	index_led = 0;
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
	  	    	updateClockBuffer();
 8000c7a:	f7ff fd07 	bl	800068c <updateClockBuffer>
	  	    	update7SEG(index_led);
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc96 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 8000c88:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fc90 	bl	80005b4 <update7SEG>

	  	    	setupDuration = 0; // if setupDuration is not set, the switch status can't
 8000c94:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <fsm_automatic_run+0x6c4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
	  	    	clearAllLed();
 8000c9a:	f7ff fb35 	bl	8000308 <clearAllLed>
	  	    	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4843      	ldr	r0, [pc, #268]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000ca4:	f000 ff11 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2108      	movs	r1, #8
 8000cac:	4840      	ldr	r0, [pc, #256]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000cae:	f000 ff0c 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	setTimer1(500);
 8000cb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb6:	f000 faf1 	bl	800129c <setTimer1>
	  	    }
			break;
 8000cba:	e1ad      	b.n	8001018 <fsm_automatic_run+0x90c>
		case RED_MODIFY:
			if(isButton2Pressed() == 1 && setupDuration == 0) {
 8000cbc:	f7ff fa58 	bl	8000170 <isButton2Pressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10a      	bne.n	8000cdc <fsm_automatic_run+0x5d0>
 8000cc6:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <fsm_automatic_run+0x6c4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <fsm_automatic_run+0x5d0>
				counter1++;
 8000cce:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a39      	ldr	r2, [pc, #228]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000cd6:	6013      	str	r3, [r2, #0]
				updateClockBuffer();
 8000cd8:	f7ff fcd8 	bl	800068c <updateClockBuffer>
			}
			if(isButton3Pressed() == 1) {
 8000cdc:	f7ff fa5a 	bl	8000194 <isButton3Pressed>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d105      	bne.n	8000cf2 <fsm_automatic_run+0x5e6>
				setupDuration = 1 - setupDuration;
 8000ce6:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <fsm_automatic_run+0x6c4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1c3 0301 	rsb	r3, r3, #1
 8000cee:	4a38      	ldr	r2, [pc, #224]	; (8000dd0 <fsm_automatic_run+0x6c4>)
 8000cf0:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1) {
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <fsm_automatic_run+0x6a0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d11c      	bne.n	8000d34 <fsm_automatic_run+0x628>
				HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	482c      	ldr	r0, [pc, #176]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000cfe:	f000 fefc 	bl	8001afa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000d02:	2108      	movs	r1, #8
 8000d04:	482a      	ldr	r0, [pc, #168]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000d06:	f000 fef8 	bl	8001afa <HAL_GPIO_TogglePin>
				index_led = 1 - index_led;
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f1c3 0301 	rsb	r3, r3, #1
 8000d12:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000d14:	6013      	str	r3, [r2, #0]
				update7SEG(index_led);
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc4a 	bl	80005b4 <update7SEG>
				update7SEG(index_led + 2);
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3302      	adds	r3, #2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fc44 	bl	80005b4 <update7SEG>
				setTimer1(500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d30:	f000 fab4 	bl	800129c <setTimer1>
			}
			if(isButton1Pressed() == 1 && setupDuration == 1) {
 8000d34:	f7ff fa0a 	bl	800014c <isButton1Pressed>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	f040 816e 	bne.w	800101c <fsm_automatic_run+0x910>
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <fsm_automatic_run+0x6c4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	f040 8169 	bne.w	800101c <fsm_automatic_run+0x910>
				redDuration = counter1;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <fsm_automatic_run+0x6ac>)
 8000d50:	6013      	str	r3, [r2, #0]
	  	    	status = AMBER_MODIFY;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <fsm_automatic_run+0x6a8>)
 8000d54:	2206      	movs	r2, #6
 8000d56:	601a      	str	r2, [r3, #0]

	  	    	counter1 = 0;  // for duration setup, increase when button ís press and assign it to duration
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <fsm_automatic_run+0x6b0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
	  	    	counter2 = 3;  // for Mode status (AMBER_MODIFY is Mode 3)
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <fsm_automatic_run+0x6b8>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	601a      	str	r2, [r3, #0]
	  	    	index_led = 0;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
	  	    	updateClockBuffer();
 8000d6a:	f7ff fc8f 	bl	800068c <updateClockBuffer>
	  	    	update7SEG(index_led);
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fc1e 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <fsm_automatic_run+0x6c0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fc18 	bl	80005b4 <update7SEG>

	  	    	setupDuration = 0; // if setupDuration is not set, the switch status can't
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <fsm_automatic_run+0x6c4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	  	    	clearAllLed();
 8000d8a:	f7ff fabd 	bl	8000308 <clearAllLed>
	  	    	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2102      	movs	r1, #2
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000d94:	f000 fe99 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <fsm_automatic_run+0x6a4>)
 8000d9e:	f000 fe94 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	setTimer1(500);
 8000da2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da6:	f000 fa79 	bl	800129c <setTimer1>
			}
			break;
 8000daa:	e137      	b.n	800101c <fsm_automatic_run+0x910>
 8000dac:	200000a4 	.word	0x200000a4
 8000db0:	40010800 	.word	0x40010800
 8000db4:	200000b0 	.word	0x200000b0
 8000db8:	2000003c 	.word	0x2000003c
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	20000044 	.word	0x20000044
 8000dc4:	20000094 	.word	0x20000094
 8000dc8:	200000ac 	.word	0x200000ac
 8000dcc:	2000009c 	.word	0x2000009c
 8000dd0:	20000098 	.word	0x20000098
		case AMBER_MODIFY:
			if(isButton2Pressed() == 1 && setupDuration == 0) {
 8000dd4:	f7ff f9cc 	bl	8000170 <isButton2Pressed>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10a      	bne.n	8000df4 <fsm_automatic_run+0x6e8>
 8000dde:	4b93      	ldr	r3, [pc, #588]	; (800102c <fsm_automatic_run+0x920>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d106      	bne.n	8000df4 <fsm_automatic_run+0x6e8>
				counter1++;
 8000de6:	4b92      	ldr	r3, [pc, #584]	; (8001030 <fsm_automatic_run+0x924>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a90      	ldr	r2, [pc, #576]	; (8001030 <fsm_automatic_run+0x924>)
 8000dee:	6013      	str	r3, [r2, #0]
				updateClockBuffer();
 8000df0:	f7ff fc4c 	bl	800068c <updateClockBuffer>
			}
			if(isButton3Pressed() == 1) {
 8000df4:	f7ff f9ce 	bl	8000194 <isButton3Pressed>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d105      	bne.n	8000e0a <fsm_automatic_run+0x6fe>
				setupDuration = 1 - setupDuration;
 8000dfe:	4b8b      	ldr	r3, [pc, #556]	; (800102c <fsm_automatic_run+0x920>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f1c3 0301 	rsb	r3, r3, #1
 8000e06:	4a89      	ldr	r2, [pc, #548]	; (800102c <fsm_automatic_run+0x920>)
 8000e08:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1) {
 8000e0a:	4b8a      	ldr	r3, [pc, #552]	; (8001034 <fsm_automatic_run+0x928>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d11c      	bne.n	8000e4c <fsm_automatic_run+0x740>
				HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000e12:	2102      	movs	r1, #2
 8000e14:	4888      	ldr	r0, [pc, #544]	; (8001038 <fsm_automatic_run+0x92c>)
 8000e16:	f000 fe70 	bl	8001afa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4886      	ldr	r0, [pc, #536]	; (8001038 <fsm_automatic_run+0x92c>)
 8000e1e:	f000 fe6c 	bl	8001afa <HAL_GPIO_TogglePin>
				index_led = 1 - index_led;
 8000e22:	4b86      	ldr	r3, [pc, #536]	; (800103c <fsm_automatic_run+0x930>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f1c3 0301 	rsb	r3, r3, #1
 8000e2a:	4a84      	ldr	r2, [pc, #528]	; (800103c <fsm_automatic_run+0x930>)
 8000e2c:	6013      	str	r3, [r2, #0]
				update7SEG(index_led);
 8000e2e:	4b83      	ldr	r3, [pc, #524]	; (800103c <fsm_automatic_run+0x930>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fbbe 	bl	80005b4 <update7SEG>
				update7SEG(index_led + 2);
 8000e38:	4b80      	ldr	r3, [pc, #512]	; (800103c <fsm_automatic_run+0x930>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fbb8 	bl	80005b4 <update7SEG>
				setTimer1(500);
 8000e44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e48:	f000 fa28 	bl	800129c <setTimer1>
			}
			if(isButton1Pressed() == 1 && setupDuration == 1) {
 8000e4c:	f7ff f97e 	bl	800014c <isButton1Pressed>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	f040 80e4 	bne.w	8001020 <fsm_automatic_run+0x914>
 8000e58:	4b74      	ldr	r3, [pc, #464]	; (800102c <fsm_automatic_run+0x920>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	f040 80df 	bne.w	8001020 <fsm_automatic_run+0x914>
				amberDuration = counter1;
 8000e62:	4b73      	ldr	r3, [pc, #460]	; (8001030 <fsm_automatic_run+0x924>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a76      	ldr	r2, [pc, #472]	; (8001040 <fsm_automatic_run+0x934>)
 8000e68:	6013      	str	r3, [r2, #0]
	  	    	status = GREEN_MODIFY;
 8000e6a:	4b76      	ldr	r3, [pc, #472]	; (8001044 <fsm_automatic_run+0x938>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]

	  	    	counter1 = 0;  // for duration setup, increase when button ís press and assign it to duration
 8000e70:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <fsm_automatic_run+0x924>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	  	    	counter2 = 4;  // for Mode status (AMBER_MODIFY is Mode 3)
 8000e76:	4b74      	ldr	r3, [pc, #464]	; (8001048 <fsm_automatic_run+0x93c>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	601a      	str	r2, [r3, #0]
	  	    	index_led = 0;
 8000e7c:	4b6f      	ldr	r3, [pc, #444]	; (800103c <fsm_automatic_run+0x930>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
	  	    	updateClockBuffer();
 8000e82:	f7ff fc03 	bl	800068c <updateClockBuffer>
	  	    	update7SEG(index_led);
 8000e86:	4b6d      	ldr	r3, [pc, #436]	; (800103c <fsm_automatic_run+0x930>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb92 	bl	80005b4 <update7SEG>
	  	    	update7SEG(index_led+2);
 8000e90:	4b6a      	ldr	r3, [pc, #424]	; (800103c <fsm_automatic_run+0x930>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3302      	adds	r3, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fb8c 	bl	80005b4 <update7SEG>

	  	    	setupDuration = 0; // if setupDuration is not set, the switch status can't
 8000e9c:	4b63      	ldr	r3, [pc, #396]	; (800102c <fsm_automatic_run+0x920>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	  	    	clearAllLed();
 8000ea2:	f7ff fa31 	bl	8000308 <clearAllLed>
	  	    	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	4863      	ldr	r0, [pc, #396]	; (8001038 <fsm_automatic_run+0x92c>)
 8000eac:	f000 fe0d 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	4860      	ldr	r0, [pc, #384]	; (8001038 <fsm_automatic_run+0x92c>)
 8000eb6:	f000 fe08 	bl	8001aca <HAL_GPIO_WritePin>
	  	    	setTimer1(500);
 8000eba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ebe:	f000 f9ed 	bl	800129c <setTimer1>
			}
			break;
 8000ec2:	e0ad      	b.n	8001020 <fsm_automatic_run+0x914>
		case GREEN_MODIFY:
			if(isButton2Pressed() == 1 && setupDuration == 0) {
 8000ec4:	f7ff f954 	bl	8000170 <isButton2Pressed>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10a      	bne.n	8000ee4 <fsm_automatic_run+0x7d8>
 8000ece:	4b57      	ldr	r3, [pc, #348]	; (800102c <fsm_automatic_run+0x920>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <fsm_automatic_run+0x7d8>
				counter1++;
 8000ed6:	4b56      	ldr	r3, [pc, #344]	; (8001030 <fsm_automatic_run+0x924>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a54      	ldr	r2, [pc, #336]	; (8001030 <fsm_automatic_run+0x924>)
 8000ede:	6013      	str	r3, [r2, #0]
				updateClockBuffer();
 8000ee0:	f7ff fbd4 	bl	800068c <updateClockBuffer>
			}
			if(isButton3Pressed() == 1) {
 8000ee4:	f7ff f956 	bl	8000194 <isButton3Pressed>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d105      	bne.n	8000efa <fsm_automatic_run+0x7ee>
				setupDuration = 1 - setupDuration;
 8000eee:	4b4f      	ldr	r3, [pc, #316]	; (800102c <fsm_automatic_run+0x920>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f1c3 0301 	rsb	r3, r3, #1
 8000ef6:	4a4d      	ldr	r2, [pc, #308]	; (800102c <fsm_automatic_run+0x920>)
 8000ef8:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1) {
 8000efa:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <fsm_automatic_run+0x928>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d11c      	bne.n	8000f3c <fsm_automatic_run+0x830>
				HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000f02:	2104      	movs	r1, #4
 8000f04:	484c      	ldr	r0, [pc, #304]	; (8001038 <fsm_automatic_run+0x92c>)
 8000f06:	f000 fdf8 	bl	8001afa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	484a      	ldr	r0, [pc, #296]	; (8001038 <fsm_automatic_run+0x92c>)
 8000f0e:	f000 fdf4 	bl	8001afa <HAL_GPIO_TogglePin>
				index_led = 1 - index_led;
 8000f12:	4b4a      	ldr	r3, [pc, #296]	; (800103c <fsm_automatic_run+0x930>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f1c3 0301 	rsb	r3, r3, #1
 8000f1a:	4a48      	ldr	r2, [pc, #288]	; (800103c <fsm_automatic_run+0x930>)
 8000f1c:	6013      	str	r3, [r2, #0]
				update7SEG(index_led);
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <fsm_automatic_run+0x930>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb46 	bl	80005b4 <update7SEG>
				update7SEG(index_led + 2);
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <fsm_automatic_run+0x930>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fb40 	bl	80005b4 <update7SEG>
				setTimer1(500);
 8000f34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f38:	f000 f9b0 	bl	800129c <setTimer1>
			}
			if(isButton1Pressed() == 1 && setupDuration == 1) {
 8000f3c:	f7ff f906 	bl	800014c <isButton1Pressed>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d16e      	bne.n	8001024 <fsm_automatic_run+0x918>
 8000f46:	4b39      	ldr	r3, [pc, #228]	; (800102c <fsm_automatic_run+0x920>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d16a      	bne.n	8001024 <fsm_automatic_run+0x918>
				greenDuration = counter1;
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <fsm_automatic_run+0x924>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a3e      	ldr	r2, [pc, #248]	; (800104c <fsm_automatic_run+0x940>)
 8000f54:	6013      	str	r3, [r2, #0]
				if(redDuration != amberDuration + greenDuration) {
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <fsm_automatic_run+0x934>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <fsm_automatic_run+0x940>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	441a      	add	r2, r3
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <fsm_automatic_run+0x944>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d006      	beq.n	8000f76 <fsm_automatic_run+0x86a>
					redDuration = amberDuration + greenDuration;
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <fsm_automatic_run+0x934>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <fsm_automatic_run+0x940>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a37      	ldr	r2, [pc, #220]	; (8001050 <fsm_automatic_run+0x944>)
 8000f74:	6013      	str	r3, [r2, #0]
				}
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2101      	movs	r1, #1
 8000f7a:	482f      	ldr	r0, [pc, #188]	; (8001038 <fsm_automatic_run+0x92c>)
 8000f7c:	f000 fda5 	bl	8001aca <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2102      	movs	r1, #2
 8000f84:	482c      	ldr	r0, [pc, #176]	; (8001038 <fsm_automatic_run+0x92c>)
 8000f86:	f000 fda0 	bl	8001aca <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	482a      	ldr	r0, [pc, #168]	; (8001038 <fsm_automatic_run+0x92c>)
 8000f90:	f000 fd9b 	bl	8001aca <HAL_GPIO_WritePin>

		  	    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4827      	ldr	r0, [pc, #156]	; (8001038 <fsm_automatic_run+0x92c>)
 8000f9a:	f000 fd96 	bl	8001aca <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4825      	ldr	r0, [pc, #148]	; (8001038 <fsm_automatic_run+0x92c>)
 8000fa4:	f000 fd91 	bl	8001aca <HAL_GPIO_WritePin>
		  	    HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	4822      	ldr	r0, [pc, #136]	; (8001038 <fsm_automatic_run+0x92c>)
 8000fae:	f000 fd8c 	bl	8001aca <HAL_GPIO_WritePin>

				status = RED_GREEN;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <fsm_automatic_run+0x938>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

				counter1 = redDuration - 1;
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <fsm_automatic_run+0x944>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <fsm_automatic_run+0x924>)
 8000fc0:	6013      	str	r3, [r2, #0]
				counter2 = greenDuration - 1;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <fsm_automatic_run+0x940>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <fsm_automatic_run+0x93c>)
 8000fca:	6013      	str	r3, [r2, #0]

				index_led = 0;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <fsm_automatic_run+0x930>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
				updateClockBuffer();
 8000fd2:	f7ff fb5b 	bl	800068c <updateClockBuffer>
				update7SEG(index_led);
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <fsm_automatic_run+0x930>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff faea 	bl	80005b4 <update7SEG>
				update7SEG(index_led+2);
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <fsm_automatic_run+0x930>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fae4 	bl	80005b4 <update7SEG>

				setTimer1(greenDuration * 1000); // Timer 1 for Traffic Led
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <fsm_automatic_run+0x940>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f94f 	bl	800129c <setTimer1>
				setTimer2(500);  // Timer 2 for LED scanning
 8000ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001002:	f000 f965 	bl	80012d0 <setTimer2>
			}
			break;
 8001006:	e00d      	b.n	8001024 <fsm_automatic_run+0x918>
		default:
			break;
 8001008:	bf00      	nop
 800100a:	e00c      	b.n	8001026 <fsm_automatic_run+0x91a>
			break;
 800100c:	bf00      	nop
 800100e:	e00a      	b.n	8001026 <fsm_automatic_run+0x91a>
			break;
 8001010:	bf00      	nop
 8001012:	e008      	b.n	8001026 <fsm_automatic_run+0x91a>
			break;
 8001014:	bf00      	nop
 8001016:	e006      	b.n	8001026 <fsm_automatic_run+0x91a>
			break;
 8001018:	bf00      	nop
 800101a:	e004      	b.n	8001026 <fsm_automatic_run+0x91a>
			break;
 800101c:	bf00      	nop
 800101e:	e002      	b.n	8001026 <fsm_automatic_run+0x91a>
			break;
 8001020:	bf00      	nop
 8001022:	e000      	b.n	8001026 <fsm_automatic_run+0x91a>
			break;
 8001024:	bf00      	nop
	}
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000098 	.word	0x20000098
 8001030:	20000090 	.word	0x20000090
 8001034:	200000a4 	.word	0x200000a4
 8001038:	40010800 	.word	0x40010800
 800103c:	2000009c 	.word	0x2000009c
 8001040:	20000040 	.word	0x20000040
 8001044:	200000b0 	.word	0x200000b0
 8001048:	20000094 	.word	0x20000094
 800104c:	20000044 	.word	0x20000044
 8001050:	2000003c 	.word	0x2000003c

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fa36 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f812 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 f898 	bl	8001194 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001064:	f000 f84a 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <main+0x28>)
 800106a:	f001 f98b 	bl	8002384 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <main+0x2c>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8001074:	f7ff fb4a 	bl	800070c <fsm_automatic_run>
 8001078:	e7fc      	b.n	8001074 <main+0x20>
 800107a:	bf00      	nop
 800107c:	200000b4 	.word	0x200000b4
 8001080:	200000b0 	.word	0x200000b0

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	; 0x40
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fd32 	bl	8002afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fd36 	bl	8001b2c <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8e3 	bl	8001290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 ffa2 	bl	800202c <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f8cf 	bl	8001290 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM2_Init+0x94>)
 800111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM2_Init+0x94>)
 8001122:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM2_Init+0x94>)
 8001130:	2209      	movs	r2, #9
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM2_Init+0x94>)
 8001142:	f001 f8cf 	bl	80022e4 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 f8a0 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM2_Init+0x94>)
 800115e:	f001 fa65 	bl	800262c <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f892 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM2_Init+0x94>)
 800117a:	f001 fc31 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f884 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000b4 	.word	0x200000b4

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a22      	ldr	r2, [pc, #136]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|R2_Pin
 80011f0:	2200      	movs	r2, #0
 80011f2:	f641 613f 	movw	r1, #7743	; 0x1e3f
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <MX_GPIO_Init+0xd8>)
 80011f8:	f000 fc67 	bl	8001aca <HAL_GPIO_WritePin>
                          |Y2_Pin|G2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 80011fc:	2200      	movs	r2, #0
 80011fe:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <MX_GPIO_Init+0xdc>)
 8001204:	f000 fc61 	bl	8001aca <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001208:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_GPIO_Init+0xe0>)
 800121e:	f000 fac3 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin R2_Pin
                           Y2_Pin G2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|R2_Pin
 8001222:	f641 633f 	movw	r3, #7743	; 0x1e3f
 8001226:	613b      	str	r3, [r7, #16]
                          |Y2_Pin|G2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2302      	movs	r3, #2
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_GPIO_Init+0xd8>)
 800123c:	f000 fab4 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8001240:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001244:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2302      	movs	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_GPIO_Init+0xdc>)
 800125a:	f000 faa5 	bl	80017a8 <HAL_GPIO_Init>

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800
 8001270:	40010c00 	.word	0x40010c00
 8001274:	40011000 	.word	0x40011000

08001278 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001280:	f000 f840 	bl	8001304 <timerRun>
	getKeyInput();
 8001284:	f7fe ff98 	bl	80001b8 <getKeyInput>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;

int TICK = 10;

void setTimer1(int duration) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <setTimer1+0x28>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <setTimer1+0x2c>)
 80012b0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <setTimer1+0x30>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000058 	.word	0x20000058
 80012c8:	200000a0 	.word	0x200000a0
 80012cc:	200000a4 	.word	0x200000a4

080012d0 <setTimer2>:
void setTimer2(int duration) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <setTimer2+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e2:	4a06      	ldr	r2, [pc, #24]	; (80012fc <setTimer2+0x2c>)
 80012e4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <setTimer2+0x30>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000058 	.word	0x20000058
 80012fc:	200000a8 	.word	0x200000a8
 8001300:	200000ac 	.word	0x200000ac

08001304 <timerRun>:

void timerRun() {
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <timerRun+0x4c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	dd0b      	ble.n	8001328 <timerRun+0x24>
		timer1_counter--;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <timerRun+0x4c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <timerRun+0x4c>)
 8001318:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <timerRun+0x4c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	dc02      	bgt.n	8001328 <timerRun+0x24>
			timer1_flag = 1;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <timerRun+0x50>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0) {
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <timerRun+0x54>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd0b      	ble.n	8001348 <timerRun+0x44>
		timer2_counter--;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <timerRun+0x54>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <timerRun+0x54>)
 8001338:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <timerRun+0x54>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	dc02      	bgt.n	8001348 <timerRun+0x44>
			timer2_flag = 1;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <timerRun+0x58>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	200000a0 	.word	0x200000a0
 8001354:	200000a4 	.word	0x200000a4
 8001358:	200000a8 	.word	0x200000a8
 800135c:	200000ac 	.word	0x200000ac

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_MspInit+0x5c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x5c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_MspInit+0x60>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_MspInit+0x60>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d4:	d113      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_TIM_Base_MspInit+0x44>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_TIM_Base_MspInit+0x44>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	201c      	movs	r0, #28
 80013f4:	f000 f9a1 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f8:	201c      	movs	r0, #28
 80013fa:	f000 f9ba 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f000 f87f 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <TIM2_IRQHandler+0x10>)
 8001462:	f000 ffdb 	bl	800241c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200000b4 	.word	0x200000b4

08001470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800147c:	f7ff fff8 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001482:	490c      	ldr	r1, [pc, #48]	; (80014b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001484:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001498:	4c09      	ldr	r4, [pc, #36]	; (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f001 fb05 	bl	8002ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fdd3 	bl	8001054 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014b8:	08002b50 	.word	0x08002b50
  ldr r2, =_sbss
 80014bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014c0:	20000100 	.word	0x20000100

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f923 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff ff3c 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f93b 	bl	800178e <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f903 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000005c 	.word	0x2000005c
 800154c:	20000064 	.word	0x20000064
 8001550:	20000060 	.word	0x20000060

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x20>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	20000064 	.word	0x20000064
 8001574:	200000fc 	.word	0x200000fc

08001578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	200000fc 	.word	0x200000fc

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4906      	ldr	r1, [pc, #24]	; (8001624 <__NVIC_EnableIRQ+0x34>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff90 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff2d 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff42 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff35 	bl	80015f0 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e148      	b.n	8001a4e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8137 	bne.w	8001a48 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4aa3      	ldr	r2, [pc, #652]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d05e      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017e4:	4aa1      	ldr	r2, [pc, #644]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d875      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017ea:	4aa1      	ldr	r2, [pc, #644]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d058      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017f0:	4a9f      	ldr	r2, [pc, #636]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d86f      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017f6:	4a9f      	ldr	r2, [pc, #636]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d052      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017fc:	4a9d      	ldr	r2, [pc, #628]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d869      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001802:	4a9d      	ldr	r2, [pc, #628]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04c      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001808:	4a9b      	ldr	r2, [pc, #620]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d863      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800180e:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <HAL_GPIO_Init+0x2d4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d046      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001814:	4a99      	ldr	r2, [pc, #612]	; (8001a7c <HAL_GPIO_Init+0x2d4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d85d      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d82a      	bhi.n	8001874 <HAL_GPIO_Init+0xcc>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d859      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_GPIO_Init+0x80>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	080018a3 	.word	0x080018a3
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800188f 	.word	0x0800188f
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d7 	.word	0x080018d7
 800183c:	080018d7 	.word	0x080018d7
 8001840:	080018d7 	.word	0x080018d7
 8001844:	080018d7 	.word	0x080018d7
 8001848:	080018d7 	.word	0x080018d7
 800184c:	080018d7 	.word	0x080018d7
 8001850:	080018d7 	.word	0x080018d7
 8001854:	080018d7 	.word	0x080018d7
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018d7 	.word	0x080018d7
 8001864:	080018d7 	.word	0x080018d7
 8001868:	080018d7 	.word	0x080018d7
 800186c:	08001885 	.word	0x08001885
 8001870:	08001899 	.word	0x08001899
 8001874:	4a82      	ldr	r2, [pc, #520]	; (8001a80 <HAL_GPIO_Init+0x2d8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e029      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e024      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01f      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e01a      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e013      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e009      	b.n	80018d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          break;
 80018d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d801      	bhi.n	80018e2 <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_Init+0x13e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_Init+0x14c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x152>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3b08      	subs	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	210f      	movs	r1, #15
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8090 	beq.w	8001a48 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2dc>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_GPIO_Init+0x2dc>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_GPIO_Init+0x2dc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001940:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x2e0>)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1dc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a47      	ldr	r2, [pc, #284]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1d8>
 800197c:	2302      	movs	r3, #2
 800197e:	e004      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001980:	2303      	movs	r3, #3
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001988:	2300      	movs	r3, #0
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	f002 0203 	and.w	r2, r2, #3
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	4093      	lsls	r3, r2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199a:	493b      	ldr	r1, [pc, #236]	; (8001a88 <HAL_GPIO_Init+0x2e0>)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4937      	ldr	r1, [pc, #220]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4933      	ldr	r1, [pc, #204]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019dc:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	492d      	ldr	r1, [pc, #180]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4929      	ldr	r1, [pc, #164]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4923      	ldr	r1, [pc, #140]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	491f      	ldr	r1, [pc, #124]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4919      	ldr	r1, [pc, #100]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4915      	ldr	r1, [pc, #84]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f47f aeaf 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	372c      	adds	r7, #44	; 0x2c
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	10320000 	.word	0x10320000
 8001a70:	10310000 	.word	0x10310000
 8001a74:	10220000 	.word	0x10220000
 8001a78:	10210000 	.word	0x10210000
 8001a7c:	10120000 	.word	0x10120000
 8001a80:	10110000 	.word	0x10110000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ada:	787b      	ldrb	r3, [r7, #1]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	041a      	lsls	r2, r3, #16
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	611a      	str	r2, [r3, #16]
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e26c      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8087 	beq.w	8001c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b4c:	4b92      	ldr	r3, [pc, #584]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d00c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b58:	4b8f      	ldr	r3, [pc, #572]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d112      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
 8001b64:	4b8c      	ldr	r3, [pc, #560]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b89      	ldr	r3, [pc, #548]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06c      	beq.n	8001c58 <HAL_RCC_OscConfig+0x12c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d168      	bne.n	8001c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e246      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x76>
 8001b94:	4b80      	ldr	r3, [pc, #512]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a7f      	ldr	r2, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e02e      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b7b      	ldr	r3, [pc, #492]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7a      	ldr	r2, [pc, #488]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b78      	ldr	r3, [pc, #480]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a77      	ldr	r2, [pc, #476]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0xbc>
 8001bce:	4b72      	ldr	r3, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a71      	ldr	r2, [pc, #452]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6e      	ldr	r2, [pc, #440]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001be8:	4b6b      	ldr	r3, [pc, #428]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6a      	ldr	r2, [pc, #424]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a67      	ldr	r2, [pc, #412]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fcb6 	bl	8001578 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fcb2 	bl	8001578 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1fa      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe4>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fca2 	bl	8001578 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fc9e 	bl	8001578 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1e6      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x10c>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c66:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c72:	4b49      	ldr	r3, [pc, #292]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x18c>
 8001c7e:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x176>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1ba      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4939      	ldr	r1, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fc57 	bl	8001578 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fc53 	bl	8001578 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e19b      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4927      	ldr	r1, [pc, #156]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fc36 	bl	8001578 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc32 	bl	8001578 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e17a      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d03a      	beq.n	8001db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d019      	beq.n	8001d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d48:	f7ff fc16 	bl	8001578 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fc12 	bl	8001578 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e15a      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 fa9a 	bl	80022a8 <RCC_Delay>
 8001d74:	e01c      	b.n	8001db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fbfc 	bl	8001578 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d82:	e00f      	b.n	8001da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fbf8 	bl	8001578 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d908      	bls.n	8001da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e140      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	42420000 	.word	0x42420000
 8001da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4b9e      	ldr	r3, [pc, #632]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e9      	bne.n	8001d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a6 	beq.w	8001f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b97      	ldr	r3, [pc, #604]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b94      	ldr	r3, [pc, #592]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a93      	ldr	r2, [pc, #588]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b91      	ldr	r3, [pc, #580]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d118      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df6:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a8a      	ldr	r2, [pc, #552]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fbb9 	bl	8001578 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0a:	f7ff fbb5 	bl	8001578 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b64      	cmp	r3, #100	; 0x64
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0fd      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b81      	ldr	r3, [pc, #516]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x312>
 8001e30:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a7a      	ldr	r2, [pc, #488]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e02d      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x334>
 8001e46:	4b76      	ldr	r3, [pc, #472]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a75      	ldr	r2, [pc, #468]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a72      	ldr	r2, [pc, #456]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	e01c      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x356>
 8001e68:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6c      	ldr	r2, [pc, #432]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a66      	ldr	r2, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	4b64      	ldr	r3, [pc, #400]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a63      	ldr	r2, [pc, #396]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb69 	bl	8001578 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fb65 	bl	8001578 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0ab      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCC_OscConfig+0x37e>
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fb53 	bl	8001578 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fb4f 	bl	8001578 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e095      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b48      	ldr	r3, [pc, #288]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a47      	ldr	r2, [pc, #284]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8081 	beq.w	8002016 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d061      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d146      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_OscConfig+0x4fc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb23 	bl	8001578 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fb1f 	bl	8001578 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e067      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d108      	bne.n	8001f70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	492d      	ldr	r1, [pc, #180]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a19      	ldr	r1, [r3, #32]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	430b      	orrs	r3, r1
 8001f82:	4927      	ldr	r1, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x4fc>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff faf3 	bl	8001578 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff faef 	bl	8001578 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e037      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46a>
 8001fb4:	e02f      	b.n	8002016 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_RCC_OscConfig+0x4fc>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fadc 	bl	8001578 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7ff fad8 	bl	8001578 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e020      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x498>
 8001fe2:	e018      	b.n	8002016 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e013      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	42420060 	.word	0x42420060

0800202c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0d0      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d910      	bls.n	8002070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4965      	ldr	r1, [pc, #404]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002092:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d040      	beq.n	800214c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d115      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e073      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06b      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4936      	ldr	r1, [pc, #216]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800211c:	f7ff fa2c 	bl	8001578 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff fa28 	bl	8001578 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e053      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d210      	bcs.n	800217c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4922      	ldr	r1, [pc, #136]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1cc>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1d0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f98a 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08002b24 	.word	0x08002b24
 80021f8:	2000005c 	.word	0x2000005c
 80021fc:	20000060 	.word	0x20000060

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_RCC_GetSysClockFreq+0x94>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x30>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x36>
 800222e:	e027      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_GetSysClockFreq+0x98>)
 8002232:	613b      	str	r3, [r7, #16]
      break;
 8002234:	e027      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	0c9b      	lsrs	r3, r3, #18
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_RCC_GetSysClockFreq+0x94>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0c5b      	lsrs	r3, r3, #17
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_RCC_GetSysClockFreq+0x98>)
 8002262:	fb02 f203 	mul.w	r2, r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e004      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	613b      	str	r3, [r7, #16]
      break;
 800227e:	e002      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetSysClockFreq+0x98>)
 8002282:	613b      	str	r3, [r7, #16]
      break;
 8002284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002286:	693b      	ldr	r3, [r7, #16]
}
 8002288:	4618      	mov	r0, r3
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	007a1200 	.word	0x007a1200
 800229c:	08002b34 	.word	0x08002b34
 80022a0:	08002b44 	.word	0x08002b44
 80022a4:	003d0900 	.word	0x003d0900

080022a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <RCC_Delay+0x34>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <RCC_Delay+0x38>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a5b      	lsrs	r3, r3, #9
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c4:	bf00      	nop
  }
  while (Delay --);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	60fa      	str	r2, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <RCC_Delay+0x1c>
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	2000005c 	.word	0x2000005c
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e041      	b.n	800237a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff f85a 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4610      	mov	r0, r2
 8002324:	f000 fa6e 	bl	8002804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d001      	beq.n	800239c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e035      	b.n	8002408 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_TIM_Base_Start_IT+0x90>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_TIM_Base_Start_IT+0x4e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c6:	d004      	beq.n	80023d2 <HAL_TIM_Base_Start_IT+0x4e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_TIM_Base_Start_IT+0x94>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d111      	bne.n	80023f6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d010      	beq.n	8002406 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f4:	e007      	b.n	8002406 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400

0800241c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0202 	mvn.w	r2, #2
 8002448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f9b4 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f9a7 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f9b6 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b04      	cmp	r3, #4
 8002484:	d122      	bne.n	80024cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d11b      	bne.n	80024cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0204 	mvn.w	r2, #4
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f98a 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f97d 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f98c 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d122      	bne.n	8002520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d11b      	bne.n	8002520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0208 	mvn.w	r2, #8
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f960 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f953 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f962 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b10      	cmp	r3, #16
 800252c:	d122      	bne.n	8002574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b10      	cmp	r3, #16
 800253a:	d11b      	bne.n	8002574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0210 	mvn.w	r2, #16
 8002544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2208      	movs	r2, #8
 800254a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f936 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f929 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f938 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10e      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0201 	mvn.w	r2, #1
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fe6c 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d10e      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b80      	cmp	r3, #128	; 0x80
 80025ba:	d107      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa6b 	bl	8002aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d10e      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d107      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8fc 	bl	80027f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b20      	cmp	r3, #32
 8002604:	d10e      	bne.n	8002624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b20      	cmp	r3, #32
 8002612:	d107      	bne.n	8002624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0220 	mvn.w	r2, #32
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fa36 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_TIM_ConfigClockSource+0x1c>
 8002644:	2302      	movs	r3, #2
 8002646:	e0b4      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x186>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800266e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002680:	d03e      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xd4>
 8002682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002686:	f200 8087 	bhi.w	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	f000 8086 	beq.w	800279e <HAL_TIM_ConfigClockSource+0x172>
 8002692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002696:	d87f      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b70      	cmp	r3, #112	; 0x70
 800269a:	d01a      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0xa6>
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d87b      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b60      	cmp	r3, #96	; 0x60
 80026a2:	d050      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x11a>
 80026a4:	2b60      	cmp	r3, #96	; 0x60
 80026a6:	d877      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b50      	cmp	r3, #80	; 0x50
 80026aa:	d03c      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0xfa>
 80026ac:	2b50      	cmp	r3, #80	; 0x50
 80026ae:	d873      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d058      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x13a>
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d86f      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b30      	cmp	r3, #48	; 0x30
 80026ba:	d064      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026bc:	2b30      	cmp	r3, #48	; 0x30
 80026be:	d86b      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d060      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d867      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d05c      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d05a      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026d0:	e062      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6899      	ldr	r1, [r3, #8]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f000 f95e 	bl	80029a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]
      break;
 80026fe:	e04f      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f000 f947 	bl	80029a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002722:	609a      	str	r2, [r3, #8]
      break;
 8002724:	e03c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	461a      	mov	r2, r3
 8002734:	f000 f8be 	bl	80028b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2150      	movs	r1, #80	; 0x50
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f915 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002744:	e02c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	461a      	mov	r2, r3
 8002754:	f000 f8dc 	bl	8002910 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2160      	movs	r1, #96	; 0x60
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f905 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002764:	e01c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	461a      	mov	r2, r3
 8002774:	f000 f89e 	bl	80028b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2140      	movs	r1, #64	; 0x40
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f8f5 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002784:	e00c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f000 f8ec 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002796:	e003      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e000      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800279e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
	...

08002804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a25      	ldr	r2, [pc, #148]	; (80028ac <TIM_Base_SetConfig+0xa8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <TIM_Base_SetConfig+0x28>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0x28>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <TIM_Base_SetConfig+0xac>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <TIM_Base_SetConfig+0xa8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <TIM_Base_SetConfig+0x52>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d003      	beq.n	8002856 <TIM_Base_SetConfig+0x52>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <TIM_Base_SetConfig+0xac>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d108      	bne.n	8002868 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <TIM_Base_SetConfig+0xa8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d103      	bne.n	800289c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	615a      	str	r2, [r3, #20]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400

080028b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 030a 	bic.w	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0210 	bic.w	r2, r3, #16
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	031b      	lsls	r3, r3, #12
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	f043 0307 	orr.w	r3, r3, #7
 8002990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b087      	sub	sp, #28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e041      	b.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d004      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10c      	bne.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <__libc_init_array>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	4d0c      	ldr	r5, [pc, #48]	; (8002aec <__libc_init_array+0x38>)
 8002aba:	4c0d      	ldr	r4, [pc, #52]	; (8002af0 <__libc_init_array+0x3c>)
 8002abc:	1b64      	subs	r4, r4, r5
 8002abe:	10a4      	asrs	r4, r4, #2
 8002ac0:	42a6      	cmp	r6, r4
 8002ac2:	d109      	bne.n	8002ad8 <__libc_init_array+0x24>
 8002ac4:	f000 f822 	bl	8002b0c <_init>
 8002ac8:	2600      	movs	r6, #0
 8002aca:	4d0a      	ldr	r5, [pc, #40]	; (8002af4 <__libc_init_array+0x40>)
 8002acc:	4c0a      	ldr	r4, [pc, #40]	; (8002af8 <__libc_init_array+0x44>)
 8002ace:	1b64      	subs	r4, r4, r5
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	42a6      	cmp	r6, r4
 8002ad4:	d105      	bne.n	8002ae2 <__libc_init_array+0x2e>
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
 8002ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002adc:	4798      	blx	r3
 8002ade:	3601      	adds	r6, #1
 8002ae0:	e7ee      	b.n	8002ac0 <__libc_init_array+0xc>
 8002ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae6:	4798      	blx	r3
 8002ae8:	3601      	adds	r6, #1
 8002aea:	e7f2      	b.n	8002ad2 <__libc_init_array+0x1e>
 8002aec:	08002b48 	.word	0x08002b48
 8002af0:	08002b48 	.word	0x08002b48
 8002af4:	08002b48 	.word	0x08002b48
 8002af8:	08002b4c 	.word	0x08002b4c

08002afc <memset>:
 8002afc:	4603      	mov	r3, r0
 8002afe:	4402      	add	r2, r0
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d100      	bne.n	8002b06 <memset+0xa>
 8002b04:	4770      	bx	lr
 8002b06:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0a:	e7f9      	b.n	8002b00 <memset+0x4>

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr
